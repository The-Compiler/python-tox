[tox]
skipsdist = True

# Sample how to execute this environment:
# (export PASSENV_ENV_VAR_TEST='Hello Tox';tox -e passenv_test01)
[testenv:single_values_01]
passenv = PWD
setenv  = LOCALUI_OUTPUT_PATH = ./tests/.output_01
allowlist_externals = 
    echo
commands = 
  echo {env:PWD}
  echo {env:LOCALUI_OUTPUT_PATH}

[testenv:single_values_02]
passenv = PWD
setenv  = LOCALUI_OUTPUT_PATH = ./tests/.output_02
allowlist_externals = 
    echo
commands = 
  echo {env:PWD}
  echo {env:LOCALUI_OUTPUT_PATH}

[testenv:file_reference]
setenv = file|.env
allowlist_externals = 
    echo
commands = 
  echo {env:FILE_ENV_VAR_01}
  echo {env:FILE_ENV_VAR_02}
  echo {env:FILE_ENV_VAR_03}

[testenv:multiple_values_01]
passenv = 
    PWD
    USER
setenv =
    file|.env
    REGISTRY={env:REGISTRY:localhost:4243}
    REGISTRY_USER=value_registry_user
    REGISTRY_PWD=value_registry_pwd

allowlist_externals = 
    echo
commands = 
  echo {env:PWD}
  echo {env:USER}
  echo {env:REGISTRY_USER}
  echo {env:FILE_ENV_VAR_01}
  echo {env:FILE_ENV_VAR_02}
  echo {env:FILE_ENV_VAR_03}

# Changes to this file need to be reflected in the following unit tests 
# in src/test/suite/extension.test.ts:
# test 'update environment variables'
# test 'get NO hover message on NO env var position'
# test 'get hover message on env var position'
# test 'get hover message on setenv var position'
# test 'get hover message on setenv file reference var position'
# test 'determine section at position in tox file'